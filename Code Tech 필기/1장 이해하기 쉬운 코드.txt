-이해하기 쉬운 전문적인 코드 작성

읽기 쉬운 코드 작성은 프로그래머의 필수 자질이다!
실제로 읽기 쉬운 코드 작성은 가장 중요한 의사소통 능력 중 하나이다.

코드의 규칙 => 컴파일러에서 잡아줌
컴파일러는 규칙을 어기면 오류 메시지로 알려줌

이해하기 쉬운 코드 => 버그가 적다

* 1.쓸모없는 비교 피하기 
논리 조건문 => 정수와 비교 연산자와 마찬가지로 구현한다.
-> 하지만 이러한 비교는 정말 쓸모 없다. 잡음과 같다.

불 반환값과 불 원시 타입(true or false)을 명시적으로 비교한다. 초보자 코드에서 종종 발견되는 안티 패턴(anti pattern)이다.

불 변수와 반환 타입은 비교할 필요가 없다

비교는 코드를 어수선하게 할 뿐만 아니라 읽기도 매우 어렵게 만든다.

이러한 안티 패턴은 간단히 제거 가능하고 읽기도 쉬워진다.

불 원시값 비교하는 부분을 제거하자! 부정 연산자(!)를 사용하자
이러면 조건 표현식이 좀 더 쉽게 읽힌다.

-메서드 단일 반환문 VS 다중 반환문
옳고 그른것은 없다. 
반환문이 나오면 메서드는 무조건 종료된다. 종료 지점이 하나이면 어디서 끝날지 항상 알고 있음 => 고로 제어 흐름이 더 구조적

입력 매개변수가 유효하지 않는 등 메서드를 일찍 종료하고 싶을 경우 => 이럴 때는 코드가 더 적게 드는 다중 반환문을 사용

*2. 부정 피하기
코드에서는 긍정 표현식이 부정 표현식보다 더 낫다.
(더 이해하기 쉽고 공간도 덜 차지한다)

부정 표현은 간접적인 행동 계층을 하나 더 추가한다.
X가 해당된다 => X가 해당되지 않는다 (추가로 이해해야 한다)

누구나 부정이 없는 표현을 좋아한다.

*3. bool 표현식을 직접 반환
위 코드는 if문이 없어도 목적을 달성시킬 수 있다. 
String이 null이면 NullPointer Exception이 발생 
=> 실행 중지 위험이 있음

코드는 문제가 없음 => 하지만 가독성이 떨어짐
if문을 쓸데없다 => 실제 의미를 흐리기만 한다.
바로 boolean 타입으로 반환시킬 수 있다.

분기문을 돌 필요도 없으며, 간결하고, 들여쓰기 할 필요도 없음

드 모르간의 법칙(De Morgans Laws)
!A && !B == !(A || B) //참
!A || !B == !(A && B) //참

만약 조건문이 더 복잡해진다면 => 더 작은 덩어리로 분할한다. 
의미있는 이름을 지어 조건 덩어리로 표현

반환을 세 개 이상 합칠 경우 간소화를 고려

*4. 불 표현식 간소화
조건문이 너무 길면 이해하기 어렵다. 코드가 몇 줄이나 이어지고 서로 다른 객체 다섯 개를 검사하는 코드를 조합해야 하기 때문이다. 길이가 길다 보니 일부를 변경할때 실수가 생길 수 있음

여러 조건문을 하나로 합쳐 확인해야 한다면 => 다른 식으로 묶는 것이 낫다. 

훌륭한 그루핑 => 조건의 의미에 따라 좌우됨
주제나 추상화 정도에 따라 그루핑

추상화 수준이 비슷하도록 명령문을 합침, 더 높은 수준의 메서드가 다음으로 낮은 수준의 메서드를 호출하는 것이 이상적

메서드별로 주제에 맞게 묶음

행은 늘어났지만 훨씬 가독성이 향상되었다. 이제 커다란 조건문을 한 번에 이해할 필요가 없다. 묶어준 덕분에 단계별로 이해할 수 있게 되었다.

*5. 조건문에서 NullPointerException 피하기
자바 초보자가 처음 접하는 예외이다.
NULL을 참조하는 메서드를 호출하거나 접근할 때 발생

코드는 이미 유효성 검사를 수행중이지만 심각한 문제를 가지고 있음
=> null 참조를 올바르게 확인하지 않았다. location이 null이면 문제 발생, message 또한 마찬가지

유효한 값인지부터 먼저 검사해야 한다.

꼭 할필요는 없음 => 매개변수 검사는 public과 protected, default 메서드에서만 하면 된다. 이런 메서드들은 어디서든 접근할 수 있고 접근이 어떻게 일어나는지 제어할 수 없기 때문이다.

*6. 스위치 실패 피하기
수년간 버그의 원인으로 악명 떨친 언어 구조체 => switch
스위치를 사용할 때는 주의하는 것이 좋다.

버그는 switch문 첫번째에 있다. case끝에 break문이 없음

이러한 동작으로 악명높음

의도하지 않은 스위치 실패는 수정이 쉽다. 

예제에서 switch는 분리해야 할 두 가지 관심사를 섞고 있다. 허가받지 않은 접근과 허가된 접근을 하나의 코드 블록으로 합쳤음

경험상 서로 다른 관심사는 서로 다른 코드 블럭에 넣어야 한다. 
좋은점
1. 코드가 읽기 쉬워진다.
2. 스위치 실패와 같은 우연한 버그가 발생할 가능성이 줄어든다.

switch로는 관심사를 분리하기 어려움 => if문 사용 선호

또한 코딩하지 않은 값을 ㅁ여시적으로 처리하는 예비 분기(branch)가 필요하다. switch문에서 default 케이스가 이 기능을 제공
(또는 AssertionError)

*7. 항상 괄호 사용하기
코드 내 들여쓰기가 잘못 읽힐 여지가 있음
중괄호가 없어 조건이 바로 뒷줄만 적용 => 전체 메서드가 악의적으로 동작 (모든 사용자에게 관리자 권한이 부여됨)

들여쓰기는 잘못 없음 => 문제는 중괄호가 빠짐

들여쓰기를 올바르게 하더라도 정신이 없는 경우 아무도 버그를 알아챌 수 없을 확률이 있다

그러므로 항상 괄호를 사용하는 것이 좋다!

코드가 적다고 항상 더 낫지는 않는다. 더 나은 코드란 더 읽기 쉬운 코드이다.

*8. 코드 대칭 이루기
코드에는 눈에 띄는 버그는 없다. 
하지만 조건과 명령문이 계속 연이어 나오는 것이 문제
이렇게 되면 모든 조건과 명령문을 한 번에 읽고 이해해야 한다.

본질적인 문제 => 코드 대칭성(code symmetry)의 부재

권한을 부여하는 코드와 권한을 부여하지 않는 코드가 섞여 있던 탓에 코드에 비대칭성이 생겼다. 

그것을 분리하면 대칭성을 향상시킬 수 있다.

최적화 여지는 더 남아있다. => grantAccess()중복 호출 => 두 조건을 별개의 private 메서드로 추출할 수 있다. 이렇게 하면 코드의 목적이 훨씬 더 명확해진다.