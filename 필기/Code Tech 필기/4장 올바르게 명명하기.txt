컴퓨터 과학에서 어려운 문제는 딱 두 가지, 캐시 무효화(cache invalidation)와 명명(naming)이다. -필 칼튼

좋은 이름을 짓는 것은 무척 어렵다. 전문가도 처음부터 좋은 이름을 구상하기는 어렵다. 

코드 요소를 명명하는 것은 훨씬 더 어렵다. 코드에서는 쉽게 알아챌 수 있는 다른 특징이 없기 때문이다. 추상적일 뿐만 아니라 대체로 전혀 새롭고 특정 도메인에만 귀속된다. 

그래서 프로그래밍에서는 훌륭한 명명이 매우 중요하다. 패키지, 클래스, 메서드, 지역 변수, 매개변수 등 명명할 요소가 너무나도 많다. 일반적으로 이러한 요소는 불분명하거나 이해하기 힘든 개념을 표현하다 보니 처음부터 좋은 이름을 짓는 것은 정말로 어렵다. 

이 장에서는 비교를 통해 코드 요소에 더 걸맞는 이름을 할당하는 방법을 배운다. 

1. 자바 명명 규칙 사용하기
자바는 패키지, 클래스, 인터페이스, 열거형, 메서드, 변수, 매개변수, 상수 등 수많은 요소를 명명해야 한다. 

위 코드의 이상한 점은 무엇일까? 모두 일관되도록 CamelCase로 명명해 공백없이 모든 단어가 대문자로 시작된다. 그러면 일관성이 있는 경우에는 아무 방식이나 써도 되는걸까?

이론적으로는 맞지만 실제로는 아니다! 위 코드는 기능상의 오류는 없지만 자바 프로그래머에게 자바 코드처럼 읽히지 않는다.

그러면 자바처럼 보이게 하려면 코드를 어떻게 바꾸어야 할까?

자바처럼 보이게 하려면 자바 규칙에 맞춰 명명해야 한다. 자바 코드 규칙은 자바 코드를 서식화하는 실질적 표준이다. 

class 명은 이미 대문자로 시작하고 CamelCase로 작성되었으므로 넘어간다. 

상수는 두드러지가 표현하기 위해 CAPITAL_SNAKE_CASE로 작성해야 한다. 이름 내 모든 철자가 대문자이며 용어를 밑줄로 구분한다. 마치 상수가 절대 바뀌지 않겠다고 몸짓하는것 처럼..

메서드 명은 get, set, save, is, has 처럼 동사로 시작해야 한다. 그리고 변수 명은 명사를 사용한다. 

자바 코드 규칙은 훌륭한 명명의 첫 단추일 뿐이다. 요점은 규칙을 따르지 않으면 절대로 좋은 이름을 얻을 수 없다는 것이다. 규칙은 기본 조건이다.