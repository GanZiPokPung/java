훌륭한 코드는 그 자체로 최고의 설명서다. 주석을 추가하기 전에 "주석이 필요없도록 코드를 향상시킬 방법이 없을까?"라고 자문해보자.
- 스티브 맥코넬 

가전 기기의 사용 설명서는 동작 방법을 알려주는 것이다. 코드 내 주석도 이와 마찬가지 역할을 한다. 주석의 목적은 코드가 어떻게 동작하는지를 알려준다. 불행히도 코드 주석은 별로 유용하지 않다. 예를 들면 이미 코드에 있는 내용만 반복하는 경우이다. 더 최악의 경우는 실제 코드와 다른 내용을 말하는 것이다.

이 장에서는 주석을 더 유용하게 만드는 방법에 대해 살펴본다. 

1. 지나치게 많은 주석 없애기
주석이 얼마나 중요한지 한번쯤은 들어봤을 것이다. 맞는 말이지만 중요한 정보(이유)를 설명할 경우에만 그러하다. 

위 코드에서는 주석이 너무나도 많이 들어있다.

코드를 쭉 읽다보면 문서화가 매우 잘되었다고 생각할지도 모르겠다. 주석 측면에서 이 코드를 "훌륭함"이라고 표시할것이다. 하지만 사실이 아니다.

대부분의 주석은 코드가 전하는 내용을 반복할 뿐이니 불필요하다. IF의 끝, FOR의 끝, Class 끝 등은 들여쓰기만 잘해도 알 수 있는 부분이다.

이 불필요한 부분들을 제거하면, 훨씬 간결하게 만들 수 있다. 아래 코드를 보자.

코드를 약간만 바꾸었을 뿐인데 주석이 거의 사라졌다.

먼저 코드 한 줄만 읽으면 바로 알 수 있는 주석은 모두 제거하였다. 코드 블럭의 끝을 표시하는 주석도 모두 없앴다. 

클래스 구조를 강조하는 주석도 모두 제거했다. 자바 코드 규칙에서 정한 클래스 구조만 잘 따르면 이러한 주석은 넣을 필요가 없다.

TODO 주석은 수정 대신 직접 검증하는 명령어를 추가하였다. 만약 수정할 수 없는 경우 문제를 논의하고 이슈를 생성해야 한다.

코드에 뭔가를 덧붙여 설명하지 않는 주석은 아무 의미가 없다.

2. 주석 처리된 코드 제거
대규모 코드 기반에는 주석 처리된 코드 영역이 항상 있다. 이러한 종류의 주석은 잡동사니일 뿐이다.

위 코드에서 리스트 항목 몇 개가 주석 처리되어 있다. 항목이 붙은 주석도 주석 처리되어 있다. 주석이 너무 과하게 쓰였다.

주석 처리된 코드는 심각한 문제이다. 일반적인 주석과 다르게 명확하게 설명해주지 않기 때문이다. 혼란 가중시키는 쓰레기를 코드에 끼얹는 셈이다.

대부분의 프로그래머는 특정 기능을 동작하지 못하도록 코드를 주석 처리 한다. 때로는 훗날 다시 사용할지 모를 코드를 잃어버리고 싶지 않아 주석 처리하기도 한다.

다행히 주석 처리된 코드는 처리하기 무척 쉽다. 그냥 지우면 된다.

주석 처리된 코드는 이해도를 떨어뜨린다. 앞으로 실행되지 않을 텍스트 줄만 늘어날 뿐이다. 

지금까지 프로젝트에서 주석 처리된 코드 주석을 해제하여 사용하는 개발자는 한 번도 본 적이 없다. 오히려 모두 지우려고 한다.

버전 관리 도구(Git)를 사용하고 있다면 지워진 코드 주석을 다시 복구할 수 있다. (필요한 경우는 거의 없겠지만...) 

3. 주석을 상수로 대체
주석은 코드를 설명하는 데 필요하다. 하지만 코드로 직접 설명하는 것이 훨씬 낫다. 

주석이 없었다면 밑에 반환 값들은 모두 매직 넘버 였을 것이다. 주석은 그 매직을 가져와 수에 의미를 부여한다.

이 방법도 나쁘지는 않다. 하지만 코드 자체로 더 의미 있게 만들 수 있다.

주석을 제거하고 상수명으로 합쳤다. 이제 코드만으로 훨씬 더 많은 것을 알 수 있다.  

상수나 변수, 필드, 메서드 이름으로 넣을 수 만 있다면 망설이지 말고 하는 습관을 들이자. 그러면 주석을 줄이는데 도움이 될것이다.

4. 주석을 유틸리티 메서드로 대체
주석을 상수로 반환하는 방법은 사용 가능한 여러 수단 중 하나이다. 하지만 코드가 더 복잡해지면 어떨까?

코드에서 반환값을 주석으로 설명해놨기 때문에 코드의 의도를 알 수 있다. 하지만 우리는 앞에서부터 주석을 최대한 줄이는데에 노력을 기울이고 있었다. 그러면 어떻게 하는것이 좋을까?

한가지 방법은 아래처럼 명명된 변수를 생성하는 것이다.

코드는 명확해졌고 주석은 제거되었다. 하지만 메서드에 추가한 변수가 바로 변환되기 때문에 꽤 불필요하다. 

더 나아질 수 있는지 살펴보자.

주석이나 변수를 추가하는 방법보다 유틸리티 메서드를 사용할 때 몇 가지 장점이 있다.

첫번째, 코드가 무엇을 하는지 이름만으로 설명할 수 있으니 메서드에서 주석을 제거할 수 있다. 

두번째, 첫 번째 메서드에 줄을 추가하지 않아도 된다. 대신 메서드가 두 개 로 늘었다. 메서드가 더 짧아지니 이해하기가 더 수월하다.

세번째, 다른 메서드에서 새 메서드를 재사용 할 수 있다. 지금 당장은 쓰일 일이 없더라도 이러한 식으로 코드를 조금씩 모듈화하게 된다.

넷째, 메서드에 계층 구조가 생긴다. 최상위 메서드 getAverageTankFillingPercent()는 하위 메서드 roundToIntegerPercent()를 호출한다. 이로써 상위 계층 메서드의 이해도가 개선된다.

정리해보면 이 작업을 함으로써 텍스트 줄만 제거 되는 것이 아니라 코드가 더 모듈화되고 추상화 수준도 균형을 이루게 된다.

5. 구현 결정 설명하기
코드에서는 어려운 결정을 내려야 할 때가 있다. 옳거나 그른 것이 없는 상황 또는 장점과 단점이 모두 있는 상황 등이 대표적이다. 바로 그럴 때 주석이 필요하다.

isInStack 메서드에서 binarySearch를 사용하였고 주석으로 빠르다고 설명해 놓았다. 하지만 왜 빠른지?, 코드는 왜 빨라야 하는지?, binarySearch 메서드가 정말로 빠른지? 등의 궁금할 수 있는 부분은 따로 설명해 놓지 않았다. 

그렇다면 주석을 어떻게 바꿔야 더 향상시킬 수 있을까?

훨씬 더 유용한 주석이 되었다. 사용 사례와 우려사항, 해법, 비용까지 명시한다.

템플릿을 사용해 필요한 부분만 간단히 채웠다.

In the context of [USE CASE], [사용 사례]의 맥락에서
facing [CONCERN]		직면하는 [우려 사항]과
we decided for [OPTION]	우리가 선택한 [해법]으로
to achieve [QUALITY] 	얻게 되는 [품질]과
accepting [DOWNSIDE]	받아들여야 하는 [단점]

이러한 템플릿을 사용하면 주요 측면을 빠뜨리는 경우는 거의 없다. 이해하기 쉽고 미리 정의된 구조를 따르므로 동료 개발자가 주석을 이해하기도 쉽다. 

중요한 결정이나 코드에서 까다로운 부분을 설명할 때에는 꼭 위 템플릿을 사용하자. 똑같지 않아도 되지만 규칙은 도움이 된다. 그리고 위 List필드에서 설명한 주석처럼 코드에서 영향을 받는 부분도 반드시 함께 표시하자.

6. 예제로 설명하기
어떤 프로그래밍 구조체(construct)는 매우 강력한 동시에 매우 복잡하다. 정규식이 바로 그러한 부류이다. 복잡한 만큼 더 쉽게 이해할 수 있도록 설명해야 한다. 

위 코드 주석은 언뜻 좋은 방법 같다. 주석은 정규식과 부합하는 문자열 유형을 설명하고 있고 코드는 정규식이 정확히 한 번만 컴파일되게 했다. 

위 주석의 문제점은 설명서가 덜 정확하고 숙련된 개발자라면 정규식 코드만으로 읽을 수 있는 내용을 그대로 반복하고 있다는 점이다.

설명서를 어떻게 향상시킬 수 있는지 보자.

주석이 전보다 더 길지만 더 구조적이고 정보도 많이 제공한다. 자연어로 형식을 설명하면서 유효한 예제와 유효하지 않은 예제 몇 가지를 제공하고 있다.